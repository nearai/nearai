{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/v1/completions": {
      "post": {
        "summary": "Completions",
        "operationId": "completions_v1_completions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ChatCompletionsRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CompletionsRequest"
                  },
                  {
                    "$ref": "#/components/schemas/EmbeddingsRequest"
                  }
                ],
                "title": "Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/chat/completions": {
      "post": {
        "summary": "Chat Completions",
        "operationId": "chat_completions_v1_chat_completions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ChatCompletionsRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CompletionsRequest"
                  },
                  {
                    "$ref": "#/components/schemas/EmbeddingsRequest"
                  }
                ],
                "title": "Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/models": {
      "get": {
        "summary": "Get Models",
        "operationId": "get_models_v1_models_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/embeddings": {
      "post": {
        "summary": "Embeddings",
        "operationId": "embeddings_v1_embeddings_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ChatCompletionsRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CompletionsRequest"
                  },
                  {
                    "$ref": "#/components/schemas/EmbeddingsRequest"
                  }
                ],
                "title": "Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/nonce/revoke": {
      "post": {
        "summary": "Revoke Nonce",
        "description": "Revoke a nonce for the account.",
        "operationId": "revoke_nonce_v1_nonce_revoke_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeNonce"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/nonce/revoke/all": {
      "post": {
        "summary": "Revoke All Nonces",
        "description": "Revoke all nonces for the account.",
        "operationId": "revoke_all_nonces_v1_nonce_revoke_all_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/nonce/list": {
      "get": {
        "summary": "List Nonces",
        "description": "List all nonces for the account.",
        "operationId": "list_nonces_v1_nonce_list_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/version": {
      "get": {
        "summary": "Version",
        "operationId": "version_v1_version_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Version V1 Version Get"
                }
              }
            }
          }
        }
      }
    },
    "/v1/registry/upload_file": {
      "post": {
        "tags": [
          "registry"
        ],
        "summary": "Upload File",
        "operationId": "upload_file_v1_registry_upload_file_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_v1_registry_upload_file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/registry/download_file": {
      "post": {
        "tags": [
          "registry"
        ],
        "summary": "Download File",
        "operationId": "download_file_v1_registry_download_file_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_download_file_v1_registry_download_file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/registry/upload_metadata": {
      "post": {
        "tags": [
          "registry"
        ],
        "summary": "Upload Metadata",
        "operationId": "upload_metadata_v1_registry_upload_metadata_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_metadata_v1_registry_upload_metadata_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/registry/download_metadata": {
      "post": {
        "tags": [
          "registry"
        ],
        "summary": "Download Metadata",
        "operationId": "download_metadata_v1_registry_download_metadata_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_download_metadata_v1_registry_download_metadata_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntryMetadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/registry/list_files": {
      "post": {
        "tags": [
          "registry"
        ],
        "summary": "List Files",
        "description": "List all files that belong to a entry.",
        "operationId": "list_files_v1_registry_list_files_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_list_files_v1_registry_list_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Filename"
                  },
                  "type": "array",
                  "title": "Response List Files V1 Registry List Files Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/registry/list_entries": {
      "post": {
        "tags": [
          "registry"
        ],
        "summary": "List Entries",
        "operationId": "list_entries_v1_registry_list_entries_post",
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Namespace"
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Category"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Tags"
            }
          },
          {
            "name": "total",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 32,
              "title": "Total"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "show_hidden",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Show Hidden"
            }
          },
          {
            "name": "show_latest_version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Show Latest Version"
            }
          },
          {
            "name": "starred_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Starred By"
            }
          },
          {
            "name": "star_point_of_view",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Star Point Of View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntryInformation"
                  },
                  "title": "Response List Entries V1 Registry List Entries Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agent/runs": {
      "post": {
        "tags": [
          "agents, assistants",
          "Agents",
          "Assistants"
        ],
        "summary": "Run Agent",
        "description": "Run an agent against an existing or a new environment.\n\nReturns the ID of the new environment resulting from the run.",
        "operationId": "run_agent_v1_agent_runs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateThreadAndRunRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Run Agent V1 Agent Runs Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/threads/runs": {
      "post": {
        "tags": [
          "agents, assistants",
          "Agents",
          "Assistants"
        ],
        "summary": "Run Agent",
        "description": "Run an agent against an existing or a new environment.\n\nReturns the ID of the new environment resulting from the run.",
        "operationId": "run_agent_v1_threads_runs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateThreadAndRunRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Run Agent V1 Threads Runs Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/download_environment": {
      "post": {
        "tags": [
          "agents, assistants"
        ],
        "summary": "Download Environment",
        "operationId": "download_environment_v1_download_environment_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_download_environment_v1_download_environment_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/gzip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/benchmark/create": {
      "get": {
        "tags": [
          "benchmark"
        ],
        "summary": "Create Benchmark",
        "operationId": "create_benchmark_v1_benchmark_create_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "benchmark_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Benchmark Name"
            }
          },
          {
            "name": "solver_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solver Name"
            }
          },
          {
            "name": "solver_args",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solver Args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Create Benchmark V1 Benchmark Create Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/benchmark/get": {
      "get": {
        "tags": [
          "benchmark"
        ],
        "summary": "Get Benchmark",
        "description": "Get the ID of a benchmark given its attributes.\n\nReturn -1 if the benchmark does not exist.",
        "operationId": "get_benchmark_v1_benchmark_get_get",
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Namespace"
            }
          },
          {
            "name": "benchmark_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Benchmark Name"
            }
          },
          {
            "name": "solver_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solver Name"
            }
          },
          {
            "name": "solver_args",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Solver Args"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Get Benchmark V1 Benchmark Get Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/benchmark/list": {
      "get": {
        "tags": [
          "benchmark"
        ],
        "summary": "List Benchmarks",
        "operationId": "list_benchmarks_v1_benchmark_list_get",
        "parameters": [
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Namespace"
            }
          },
          {
            "name": "benchmark_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Benchmark Name"
            }
          },
          {
            "name": "solver_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Solver Name"
            }
          },
          {
            "name": "solver_args",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Solver Args"
            }
          },
          {
            "name": "total",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 32,
              "title": "Total"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BenchmarkOutput"
                  },
                  "title": "Response List Benchmarks V1 Benchmark List Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/benchmark/add_result": {
      "get": {
        "tags": [
          "benchmark"
        ],
        "summary": "Add Benchmark Result",
        "operationId": "add_benchmark_result_v1_benchmark_add_result_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "benchmark_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Benchmark Id"
            }
          },
          {
            "name": "index",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Index"
            }
          },
          {
            "name": "solved",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "title": "Solved"
            }
          },
          {
            "name": "info",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Info"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/benchmark/get_result": {
      "get": {
        "tags": [
          "benchmark"
        ],
        "summary": "Get Benchmark Result",
        "operationId": "get_benchmark_result_v1_benchmark_get_result_get",
        "parameters": [
          {
            "name": "benchmark_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Benchmark Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BenchmarkResultOutput"
                  },
                  "title": "Response Get Benchmark Result V1 Benchmark Get Result Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vector_stores": {
      "get": {
        "tags": [
          "Vector Stores"
        ],
        "summary": "List Vector Stores",
        "description": "List all vector stores for the authenticated account.\n\nArgs:\n----\n    auth (AuthToken): The authentication token.\n\nReturns:\n-------\n    List[VectorStore]: A list of vector stores.",
        "operationId": "list_vector_stores_v1_vector_stores_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Vector Stores"
        ],
        "summary": "Create Vector Store",
        "description": "Create a new vector store.\n\nArgs:\n----\n    request (CreateVectorStoreRequest): The request containing vector store details.\n    background_tasks (BackgroundTasks): FastAPI background tasks.\n    auth (AuthToken): The authentication token.\n\nReturns:\n-------\n    VectorStore: The created vector store object.\n\nRaises:\n------\n    HTTPException: If the vector store creation fails.",
        "operationId": "create_vector_store_v1_vector_stores_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVectorStoreRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorStore"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/vector_stores/{vector_store_id}": {
      "get": {
        "tags": [
          "Vector Stores"
        ],
        "summary": "Get Vector Store",
        "description": "Retrieve a specific vector store.\n\nArgs:\n----\n    vector_store_id (str): The ID of the vector store to retrieve.\n    auth (AuthToken): The authentication token.\n\nReturns:\n-------\n    VectorStore: The requested vector store.\n\nRaises:\n------\n    HTTPException: If the vector store is not found.",
        "operationId": "get_vector_store_v1_vector_stores__vector_store_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Vector Store Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Vector Stores"
        ],
        "summary": "Update Vector Store",
        "description": "Update a vector store. (Not implemented).\n\nThis endpoint is a placeholder for future implementation.",
        "operationId": "update_vector_store_v1_vector_stores__vector_store_id__patch",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vector Stores"
        ],
        "summary": "Delete Vector Store",
        "description": "Delete a vector store.\n\nArgs:\n----\n    vector_store_id (str): The ID of the vector store to delete.\n    auth (AuthToken): The authentication token.\n\nReturns:\n-------\n    JSONResponse: A JSON object with the deletion status.\n\nRaises:\n------\n    HTTPException: If the vector store is not found or deletion fails.",
        "operationId": "delete_vector_store_v1_vector_stores__vector_store_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Vector Store Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vector_stores/{vector_store_id}/files": {
      "post": {
        "tags": [
          "Vector Stores"
        ],
        "summary": "Create Vector Store File",
        "description": "Attach a file to an existing vector store and initiate embedding generation.\n\nArgs:\n----\n    vector_store_id (str): The ID of the vector store to attach the file to.\n    file_data (VectorStoreFileCreate): The file data containing the file_id to attach.\n    background_tasks (BackgroundTasks): FastAPI background tasks for asynchronous processing.\n    auth (AuthToken): The authentication token for the current user.\n\nReturns:\n-------\n    VectorStore: The updated vector store object with the newly attached file.\n\nRaises:\n------\n    HTTPException:\n        - 404 if the vector store is not found.\n        - 500 if file attachment fails or if there's an error updating the vector store.\n\nNotes:\n-----\n    - This function updates the vector store by adding the new file_id to its list of files.\n    - It queues a background task to generate embeddings for the newly attached file.\n    - The vector store's status is set to \"in_progress\" as embedding generation begins.",
        "operationId": "create_vector_store_file_v1_vector_stores__vector_store_id__files_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Vector Store Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VectorStoreFileCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vector_stores/{vector_store_id}/search": {
      "post": {
        "tags": [
          "Vector Stores"
        ],
        "summary": "Query Vector Store",
        "description": "Perform a similarity search on the specified vector store.\n\nArgs:\n----\n    vector_store_id (str): The ID of the vector store to search.\n    request (QueryVectorStoreRequest): The request containing the query text.\n    auth (AuthToken): The authentication token for the request.\n\nReturns:\n-------\n    List[Dict]: A list of search results, each containing the document content and metadata.\n\nRaises:\n------\n    HTTPException: If the vector store is not found or if there's an error during the search.",
        "operationId": "query_vector_store_v1_vector_stores__vector_store_id__search_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "vector_store_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Vector Store Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryVectorStoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vector_stores/from_source": {
      "post": {
        "tags": [
          "Vector Stores"
        ],
        "summary": "Create Vector Store From Source",
        "description": "Create a new vector store from a source (currently only GitHub).\n\nArgs:\n----\n    request (CreateVectorStoreFromSourceRequest): The request containing vector store and source details.\n    background_tasks (BackgroundTasks): FastAPI background tasks.\n    auth (AuthToken): The authentication token.\n\nReturns:\n-------\n    VectorStore: The created vector store object.\n\nRaises:\n------\n    HTTPException: If the vector store creation fails.",
        "operationId": "create_vector_store_from_source_v1_vector_stores_from_source_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVectorStoreFromSourceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorStore"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/files": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload File",
        "description": "Upload a file to the system and create a corresponding database record.\n\nThis function handles file uploads, determines the content type, checks for\nsupported file types and encodings, and stores the file in the configured\nstorage system.\n\nArgs:\n----\n    file (UploadFile): The file to be uploaded.\n    purpose (str): The purpose of the file upload. Must be one of:\n                   \"assistants\", \"batch\", \"fine-tune\", \"vision\".\n    auth (AuthToken): The authentication token for the current user.\n\nReturns:\n-------\n    FileObject: An object containing details of the uploaded file.\n\nRaises:\n------\n    HTTPException:\n        - 400 if the purpose is invalid, file type is not supported,\n          or file encoding is not supported.\n        - 404 if the file details are not found after creation.\n        - 500 if there's an error during file upload or database operations.",
        "operationId": "upload_file_v1_files_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_v1_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileObject"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/health": {
      "get": {
        "summary": "Health",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BenchmarkOutput": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "namespace": {
            "type": "string",
            "title": "Namespace"
          },
          "benchmark": {
            "type": "string",
            "title": "Benchmark"
          },
          "solver": {
            "type": "string",
            "title": "Solver"
          },
          "args": {
            "type": "string",
            "title": "Args"
          },
          "solved": {
            "type": "integer",
            "title": "Solved"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": [
          "id",
          "namespace",
          "benchmark",
          "solver",
          "args",
          "solved",
          "total"
        ],
        "title": "BenchmarkOutput"
      },
      "BenchmarkResultOutput": {
        "properties": {
          "index": {
            "type": "integer",
            "title": "Index"
          },
          "solved": {
            "type": "boolean",
            "title": "Solved"
          },
          "info": {
            "type": "string",
            "title": "Info"
          }
        },
        "type": "object",
        "required": [
          "index",
          "solved",
          "info"
        ],
        "title": "BenchmarkResultOutput"
      },
      "Body_download_environment_v1_download_environment_post": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Path"
          },
          "entry_location": {
            "$ref": "#/components/schemas/EntryLocation"
          }
        },
        "type": "object",
        "required": [
          "path",
          "entry_location"
        ],
        "title": "Body_download_environment_v1_download_environment_post"
      },
      "Body_download_file_v1_registry_download_file_post": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Path"
          },
          "entry_location": {
            "$ref": "#/components/schemas/EntryLocation"
          }
        },
        "type": "object",
        "required": [
          "path",
          "entry_location"
        ],
        "title": "Body_download_file_v1_registry_download_file_post"
      },
      "Body_download_metadata_v1_registry_download_metadata_post": {
        "properties": {
          "entry_location": {
            "$ref": "#/components/schemas/EntryLocation"
          }
        },
        "type": "object",
        "required": [
          "entry_location"
        ],
        "title": "Body_download_metadata_v1_registry_download_metadata_post"
      },
      "Body_list_files_v1_registry_list_files_post": {
        "properties": {
          "entry_location": {
            "$ref": "#/components/schemas/EntryLocation"
          }
        },
        "type": "object",
        "required": [
          "entry_location"
        ],
        "title": "Body_list_files_v1_registry_list_files_post"
      },
      "Body_upload_file_v1_files_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "purpose": {
            "type": "string",
            "enum": [
              "assistants",
              "batch",
              "fine-tune",
              "vision"
            ],
            "title": "Purpose"
          }
        },
        "type": "object",
        "required": [
          "file",
          "purpose"
        ],
        "title": "Body_upload_file_v1_files_post"
      },
      "Body_upload_file_v1_registry_upload_file_post": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Path"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "namespace": {
            "type": "string",
            "title": "Namespace"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "version": {
            "type": "string",
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "path",
          "file",
          "namespace",
          "name",
          "version"
        ],
        "title": "Body_upload_file_v1_registry_upload_file_post"
      },
      "Body_upload_metadata_v1_registry_upload_metadata_post": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/EntryMetadataInput"
          },
          "entry_location": {
            "$ref": "#/components/schemas/EntryLocation"
          }
        },
        "type": "object",
        "required": [
          "metadata",
          "entry_location"
        ],
        "title": "Body_upload_metadata_v1_registry_upload_metadata_post"
      },
      "ChatCompletionsRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "default": "fireworks::accounts/fireworks/models/mixtral-8x22b-instruct"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider",
            "default": "fireworks"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "default": 1024
          },
          "logprobs": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logprobs"
          },
          "temperature": {
            "type": "number",
            "title": "Temperature",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top P",
            "default": 1
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "default": 0
          },
          "n": {
            "type": "integer",
            "title": "N",
            "default": 1
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop"
          },
          "response_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              },
              {
                "type": "null"
              }
            ]
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "default": false
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array",
            "title": "Messages"
          }
        },
        "type": "object",
        "required": [
          "messages"
        ],
        "title": "ChatCompletionsRequest",
        "description": "Request for chat completions."
      },
      "ChunkingStrategy": {
        "properties": {},
        "type": "object",
        "title": "ChunkingStrategy",
        "description": "Defines the chunking strategy for vector stores."
      },
      "CompletionsRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "default": "fireworks::accounts/fireworks/models/mixtral-8x22b-instruct"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider",
            "default": "fireworks"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "default": 1024
          },
          "logprobs": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logprobs"
          },
          "temperature": {
            "type": "number",
            "title": "Temperature",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top P",
            "default": 1
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "default": 0
          },
          "n": {
            "type": "integer",
            "title": "N",
            "default": 1
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop"
          },
          "response_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              },
              {
                "type": "null"
              }
            ]
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "default": false
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          }
        },
        "type": "object",
        "required": [
          "prompt"
        ],
        "title": "CompletionsRequest",
        "description": "Request for completions."
      },
      "CreateThreadAndRunRequest": {
        "properties": {
          "agent_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Id",
            "description": "The name or identifier of the agent to use to execute this run. Either `agent_id` or `assistant_id` must be provided."
          },
          "assistant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assistant Id",
            "description": "An OpenAI compatibility alias for agent. The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run."
          },
          "environment_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Environment Id",
            "description": "The ID of the environment to use to as a base for this run. If not provided, a new environment will be created."
          },
          "thread": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Thread",
            "description": "An OpenAI compatibility alias for environment. If no thread is provided, an empty thread will be created."
          },
          "new_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "New Message",
            "description": "A message to add to the environment chat.txt before running the agents."
          },
          "max_iterations": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Iterations",
            "description": "Allow an agent to run for up to this number of iterations.",
            "default": 10
          },
          "record_run": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Record Run",
            "description": "Whether to record the run in the registry.",
            "default": true
          },
          "tool_resources": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Resources",
            "description": "A dictionary of tool resources to use for the run."
          },
          "user_env_vars": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Env Vars",
            "description": "Env vars provided by the user"
          },
          "agent_env_vars": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Env Vars",
            "description": "Env vars provided by the agent"
          }
        },
        "type": "object",
        "title": "CreateThreadAndRunRequest"
      },
      "CreateVectorStoreFromSourceRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GitHubSource"
              },
              {
                "$ref": "#/components/schemas/GitLabSource"
              }
            ],
            "title": "Source"
          },
          "source_auth": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Auth"
          },
          "chunking_strategy": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChunkingStrategy"
              },
              {
                "type": "null"
              }
            ]
          },
          "expires_after": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExpiresAfter-Input"
              },
              {
                "type": "null"
              }
            ]
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "required": [
          "name",
          "source"
        ],
        "title": "CreateVectorStoreFromSourceRequest"
      },
      "CreateVectorStoreRequest": {
        "properties": {
          "chunking_strategy": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChunkingStrategy"
              },
              {
                "type": "null"
              }
            ]
          },
          "expires_after": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExpiresAfter-Input"
              },
              {
                "type": "null"
              }
            ]
          },
          "file_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Ids"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateVectorStoreRequest",
        "description": "Request model for creating a new vector store."
      },
      "EmbeddingsRequest": {
        "properties": {
          "input": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "items": {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                "type": "array"
              }
            ],
            "title": "Input"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "default": "fireworks::nomic-ai/nomic-embed-text-v1.5"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider"
          }
        },
        "type": "object",
        "required": [
          "input"
        ],
        "title": "EmbeddingsRequest",
        "description": "Request for embeddings."
      },
      "EntryInformation": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "namespace": {
            "type": "string",
            "title": "Namespace"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "category": {
            "type": "string",
            "title": "Category"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "details": {
            "type": "object",
            "title": "Details"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "num_stars": {
            "type": "integer",
            "title": "Num Stars"
          },
          "starred_by_point_of_view": {
            "type": "boolean",
            "title": "Starred By Point Of View"
          }
        },
        "type": "object",
        "required": [
          "id",
          "namespace",
          "name",
          "version",
          "category",
          "description",
          "details",
          "tags",
          "num_stars",
          "starred_by_point_of_view"
        ],
        "title": "EntryInformation"
      },
      "EntryLocation": {
        "properties": {
          "namespace": {
            "type": "string",
            "title": "Namespace"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "version": {
            "type": "string",
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "namespace",
          "name",
          "version"
        ],
        "title": "EntryLocation"
      },
      "EntryMetadata": {
        "properties": {
          "category": {
            "type": "string",
            "title": "Category"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "details": {
            "type": "object",
            "title": "Details"
          },
          "show_entry": {
            "type": "boolean",
            "title": "Show Entry"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "version": {
            "type": "string",
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "category",
          "description",
          "tags",
          "details",
          "show_entry",
          "name",
          "version"
        ],
        "title": "EntryMetadata"
      },
      "EntryMetadataInput": {
        "properties": {
          "category": {
            "type": "string",
            "title": "Category"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "details": {
            "type": "object",
            "title": "Details"
          },
          "show_entry": {
            "type": "boolean",
            "title": "Show Entry"
          }
        },
        "type": "object",
        "required": [
          "category",
          "description",
          "tags",
          "details",
          "show_entry"
        ],
        "title": "EntryMetadataInput"
      },
      "ExpiresAfter-Input": {
        "properties": {
          "anchor": {
            "type": "string",
            "enum": [
              "last_active_at"
            ],
            "const": "last_active_at",
            "title": "Anchor"
          },
          "days": {
            "type": "integer",
            "title": "Days"
          }
        },
        "type": "object",
        "required": [
          "anchor",
          "days"
        ],
        "title": "ExpiresAfter",
        "description": "Defines the expiration policy for vector stores."
      },
      "ExpiresAfter-Output": {
        "properties": {
          "anchor": {
            "type": "string",
            "enum": [
              "last_active_at"
            ],
            "const": "last_active_at",
            "title": "Anchor"
          },
          "days": {
            "type": "integer",
            "title": "Days"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "anchor",
          "days"
        ],
        "title": "ExpiresAfter"
      },
      "FileCounts": {
        "properties": {
          "cancelled": {
            "type": "integer",
            "title": "Cancelled"
          },
          "completed": {
            "type": "integer",
            "title": "Completed"
          },
          "failed": {
            "type": "integer",
            "title": "Failed"
          },
          "in_progress": {
            "type": "integer",
            "title": "In Progress"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "cancelled",
          "completed",
          "failed",
          "in_progress",
          "total"
        ],
        "title": "FileCounts"
      },
      "FileObject": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "bytes": {
            "type": "integer",
            "title": "Bytes"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "object": {
            "type": "string",
            "enum": [
              "file"
            ],
            "const": "file",
            "title": "Object"
          },
          "purpose": {
            "type": "string",
            "enum": [
              "assistants",
              "assistants_output",
              "batch",
              "batch_output",
              "fine-tune",
              "fine-tune-results",
              "vision"
            ],
            "title": "Purpose"
          },
          "status": {
            "type": "string",
            "enum": [
              "uploaded",
              "processed",
              "error"
            ],
            "title": "Status"
          },
          "status_details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status Details"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "bytes",
          "created_at",
          "filename",
          "object",
          "purpose",
          "status"
        ],
        "title": "FileObject"
      },
      "Filename": {
        "properties": {
          "filename": {
            "type": "string",
            "title": "Filename"
          }
        },
        "type": "object",
        "required": [
          "filename"
        ],
        "title": "Filename"
      },
      "GitHubSource": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "github"
          },
          "owner": {
            "type": "string",
            "title": "Owner"
          },
          "repo": {
            "type": "string",
            "title": "Repo"
          },
          "branch": {
            "type": "string",
            "title": "Branch",
            "default": "main"
          }
        },
        "type": "object",
        "required": [
          "owner",
          "repo"
        ],
        "title": "GitHubSource"
      },
      "GitLabSource": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "gitlab"
          },
          "owner": {
            "type": "string",
            "title": "Owner"
          },
          "repo": {
            "type": "string",
            "title": "Repo"
          },
          "branch": {
            "type": "string",
            "title": "Branch",
            "default": "main"
          }
        },
        "type": "object",
        "required": [
          "owner",
          "repo"
        ],
        "title": "GitLabSource"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Message": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role"
          },
          "content": {
            "type": "string",
            "title": "Content"
          }
        },
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "title": "Message"
      },
      "QueryVectorStoreRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "QueryVectorStoreRequest",
        "description": "Request model for querying a vector store."
      },
      "ResponseFormat": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "json_schema": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Json Schema"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "ResponseFormat",
        "description": "The format of the response."
      },
      "RevokeNonce": {
        "properties": {
          "nonce": {
            "type": "string",
            "format": "binary",
            "title": "Nonce"
          }
        },
        "type": "object",
        "required": [
          "nonce"
        ],
        "title": "RevokeNonce"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VectorStore": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "file_counts": {
            "$ref": "#/components/schemas/FileCounts"
          },
          "last_active_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Active At"
          },
          "metadata": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "object": {
            "type": "string",
            "enum": [
              "vector_store"
            ],
            "const": "vector_store",
            "title": "Object"
          },
          "status": {
            "type": "string",
            "enum": [
              "expired",
              "in_progress",
              "completed"
            ],
            "title": "Status"
          },
          "usage_bytes": {
            "type": "integer",
            "title": "Usage Bytes"
          },
          "expires_after": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExpiresAfter-Output"
              },
              {
                "type": "null"
              }
            ]
          },
          "expires_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expires At"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "file_counts",
          "name",
          "object",
          "status",
          "usage_bytes"
        ],
        "title": "VectorStore"
      },
      "VectorStoreFileCreate": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id"
          }
        },
        "type": "object",
        "required": [
          "file_id"
        ],
        "title": "VectorStoreFileCreate",
        "description": "Request model for creating a vector store file."
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
